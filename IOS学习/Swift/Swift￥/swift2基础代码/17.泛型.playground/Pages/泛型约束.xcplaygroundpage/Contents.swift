//: 泛型约束: 有时候需要强制泛型类型在一定的范围内, 比如是某个类的子类,或遵从某个协议.
//func 某函数<T: 某类, U: 某协议>(某参数: T, 某类型: U) {
//    //函数体
//}
func 查询文本位置(文本数组:[String], 要查询的文本:String) -> Int? {
    for (位置, 值) in 文本数组.enumerate() {
        if 值 == 要查询的文本 {
            return 位置
        }
    }
    return nil
}

查询文本位置(["刘备","关羽","张飞","孔明"], 要查询的文本: "孔明")


//func 查询文本位置<T: Equatable>(文本数组:[T], 要查询的文本:T) -> Int? {
//    for (位置, 值) in 文本数组.enumerate() {
//        if 值 == 要查询的文本 {
//            return 位置
//        }
//    }
//    return nil
//}


//: [关联类型](@next)
